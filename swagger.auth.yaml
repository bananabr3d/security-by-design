swagger: '2.0'
info:
  version: v1
  title: VoltWave Auth (Security-by-Design)
  description: Auth routes for VoltWave (Port 443) and VoltWave Systems (Port 8443)
host: www.voltwave.systems
schemes:
  - https
paths:
  /register:
    get:
      summary: GET register.html
      responses:
        '200':
          description: Returned on success.
    post:
      summary: Register a user
      description: Register a user with username and password in the user db.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: email
          in: formData
          description: User's email address
          required: true
          type: string
        - name: username
          in: formData
          description: User's username
          required: true
          type: string
        - name: password
          in: formData
          description: User's password
          required: true
          type: string
      responses:
        '302':
          description: Returned on success. A user has been successfully created. Redirect to login page.
          schema:
            type: object
        '500':
          description: Internal server error
  /login:
    get:
      summary: GET login.html
      responses:
        '200':
          description: Returned on success.
    post:
      summary: Login a user
      description: Login a user with username and password and get the JWT Token for authorization.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: username
          in: formData
          description: User's username
          required: true
          type: string
        - name: password
          in: formData
          description: User's password
          required: true
          type: string
      responses:
        '302':
          description: Returned on success. The user has successfully logged in. A JWT Token has been provided and redirect to login/2fa page.
          schema:
            type: object
        '500':
          description: Internal server error
  /register/2fa:
    get:
      summary: GET register_2fa.html (only with valid JWT and inactive 2fa)
      responses:
        '200':
          description: Returned on success.
    post:
      summary: Register your 2fa
      description: Register the 2fa on the currently logged in user by verifying the otp token from the provided secret in the GET-Request 
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: otp
          in: formData
          description: User's otp generated by provided 2fa secret
          required: true
          type: integer
      responses:
        '200':
          description: Returned on success. A user 2fa has been successfully added.
          schema:
            type: object
        '500':
          description: Internal server error
  /login/2fa:
    get:
      summary: GET login_2fa.html (only with valid JWT)
      responses:
        '200':
          description: Returned on success.
    post:
      summary: Login with 2fa
      description: Login a user with the 2fa otp. Grants a new JWT Token with a 2fa timestamp for verification.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: otp
          in: formData
          description: User's otp generated by provided 2fa secret
          required: true
          type: integer
      responses:
        '200':
          description: Returned on success. A new JWT Token with 2fa timestamp for validation has been provided.
          schema:
            type: object
        '500':
          description: Internal server error
  /logout:
    get:
      summary: Unsets the current JWT Token (only accessible with valid JWT)
      responses:
        '200':
          description: Returned on success.
       
  /reset-password:
    get:
      summary: GET reset_password.html
      description: A page in order to reset your password.
      responses:
        '200':
          description: Returned on success.
          
    post:
      summary: Reset your password
      description: Reset your password by providing your e-mail address, answer your security question and setting a new password.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: email
          in: formData
          description: User's email address
          required: true
          type: string
        - name: security_question
          in: formData
          description: A security_question (only provided ones)
          required: true
          type: string
        - name: answer
          in: formData
          description: The answer of the security question
          required: true
          type: string
        - name: new_password
          in: formData
          description: User's new password after reset
          required: true
          type: string
      responses:
        '302':
          description: Returned on success. The user password has been successfully reset. Redirect to login page.
          schema:
            type: object
        '500':
          description: Internal server error
  /add-security-question:
    post:
      summary: Add a security question to your user (JWT required)
      description: By providing a answer to a security question, it will be added to your user.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: security_question
          in: formData
          description: A security_question (only provided ones)
          required: true
          type: string
        - name: answer
          in: formData
          description: The answer of the security question
          required: true
          type: string
      responses:
        '302':
          description: Returned on success. The security question was successfully added to the user. Redirect to user_info page.
          schema:
            type: object
        '500':
          description: Internal server error
  /remove-security-question:
    post:
      summary: Remove a security question from your user (JWT required)
      description: By providing a answer to a security question, it will be removed to your user.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: security_question
          in: formData
          description: A security_question (only provided ones)
          required: true
          type: string
        - name: answer
          in: formData
          description: The answer of the security question
          required: true
          type: string
      responses:
        '302':
          description: Returned on success. The security question was successfully removed from the user. Redirect to user_info page.
          schema:
            type: object
        '500':
          description: Internal server error
  /set-new-password:
    post:
      summary: Set a new password (JWT required)
      description: By providing the old password and a new password, the new password will be set to the user.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: old_password
          in: formData
          description: The users current password
          required: true
          type: string
        - name: new_password
          in: formData
          description: The users new password
          required: true
          type: string
      responses:
        '302':
          description: Returned on success. The users new password has been set. Redirect to login page.
          schema:
            type: object
        '500':
          description: Internal server error
  /delete-user:
    post:
      summary: Delete user account (JWT required)
      description: Delete a user account. If 2fa activated, 2fa authenticated is needed.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      responses:
        '302':
          description: Returned on success. Resets the JWT token. Redirect to login page.
          schema:
            type: object
        '500':
          description: Internal server error
  /export-user:
    get:
      summary: Export current user information (JWT and 2fa required)
      description: Export the information of the current logged in user.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      responses:
        '302':
          description: Redirect to user_info page with additional information for export.
          schema:
            type: object
        '500':
          description: Internal server error
       
  /user-info:
    get:
      summary: GET user_info.html
      description: The User info page can only be accessed with a valid JWT Token.
      responses:
        '200':
          description: Returned on success.

  /reset-2fa:
    post:
      summary: Resets the 2fa (JWT required, 2fa optionally)
      description: Resets the 2fa of a user. If the user is 2fa authenticated you dont need a backup code.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html; charset=utf-8
      parameters:
        - name: backup_code
          in: formData
          description: One of the ten backup codes of the user.
          required: true
          type: string
      responses:
        '302':
          description: Returned on success. The user 2fa has been reset. Redirect to login page and reset jwt.
          schema:
            type: object
        '500':
          description: Internal server error